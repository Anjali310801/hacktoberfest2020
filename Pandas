{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dealing with pandas\n",
    "# there are mainly two data structure in pandas:\n",
    "\n",
    "# 1: Series - it is one dimensional labeled array\n",
    "#     capable of holding any data type(integers, string, float, python objects etc.)\n",
    "#     The axis labels are collective it refered as index\n",
    "\n",
    "# 2: Dataframe - It is a two dimensional labeled data structure with columns of potentially\n",
    "#     diffrent types. We can think it is as a Excel spread-sheet or SQL Table, or a dict of series objects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing modules\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender      job\n",
       "0  alice   19      F  student\n",
       "1   john   26      M  student"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating dataframes\n",
    "columns_head = [\"name\",\"age\",\"gender\",\"job\"]\n",
    "user1 = pd.DataFrame(([[\"alice\",19,\"F\",\"student\"],[\"john\",26,\"M\",\"student\"]]),columns = columns_head)\n",
    "user1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    name  age gender      job\n",
      "0  alice   19      F  student\n",
      "1   john   26      M  student\n"
     ]
    }
   ],
   "source": [
    "print(user1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender    job\n",
       "0    tom   12      M    cat\n",
       "1  jerry    5      M  mouse"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user2=pd.DataFrame(([[\"tom\",12,\"M\",\"cat\"],[\"jerry\",5,\"M\",\"mouse\"]]),columns=columns_head)\n",
    "user2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0  peter   23      M      beggar\n",
       "1  julie   24      F  billionare"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user3=pd.DataFrame(dict(name=[\"peter\",\"julie\"],age=[23,24],gender=[\"M\",\"F\"],job=[\"beggar\",\"billionare\"]))\n",
    "user3\n",
    "# we are typecasting set of lists as dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'How to find outliers\\nfind mean\\nfind sd\\nany value lying outside the range(mean-3sd,mean+3sd)\\nare generally outlined'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# limit of Excel: 2^20 rows and 2^14 columns\n",
    "\"\"\"How to find outliers\n",
    "find mean\n",
    "find sd\n",
    "any value lying outside the range(mean-3sd,mean+3sd)\n",
    "are generally outlined\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender      job\n",
       "0  alice   19      F  student\n",
       "1   john   26      M  student\n",
       "0    tom   12      M      cat\n",
       "1  jerry    5      M    mouse"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# concatening DataFrames\n",
    "user=user1.append(user2)\n",
    "user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0  alice   19      F     student\n",
       "1   john   26      M     student\n",
       "0    tom   12      M         cat\n",
       "1  jerry    5      M       mouse\n",
       "0  peter   23      M      beggar\n",
       "1  julie   24      F  billionare"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users = pd.concat([user1,user2,user3])\n",
    "users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>height</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>eric</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>john</td>\n",
       "      <td>126</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  height\n",
       "0  peter     123\n",
       "1  julie     124\n",
       "2   eric     125\n",
       "3   john     126"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# join data frames\n",
    "user4 = pd.DataFrame(dict(name=[\"peter\",\"julie\",\"eric\",\"john\"],height=[123,124,125,126]))\n",
    "user4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "      <th>height</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "      <td>126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "      <td>124</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job  height\n",
       "0   john   26      M     student     126\n",
       "1  peter   23      M      beggar     123\n",
       "2  julie   24      F  billionare     124"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_inter = pd.merge(users,user4,on=\"name\")\n",
    "merge_inter\n",
    "# displays common values users and user4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "      <th>height</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19.0</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26.0</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "      <td>126.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tom</td>\n",
       "      <td>12.0</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5.0</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>peter</td>\n",
       "      <td>23.0</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "      <td>123.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>julie</td>\n",
       "      <td>24.0</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "      <td>124.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>eric</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name   age gender         job  height\n",
       "0  alice  19.0      F     student     NaN\n",
       "1   john  26.0      M     student   126.0\n",
       "2    tom  12.0      M         cat     NaN\n",
       "3  jerry   5.0      M       mouse     NaN\n",
       "4  peter  23.0      M      beggar   123.0\n",
       "5  julie  24.0      F  billionare   124.0\n",
       "6   eric   NaN    NaN         NaN   125.0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_inter1 = pd.merge(users,user4,on=\"name\",how=\"outer\")\n",
    "merge_inter1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function merge in module pandas.core.reshape.merge:\n",
      "\n",
      "merge(left, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)\n",
      "    Merge DataFrame objects by performing a database-style join operation by\n",
      "    columns or indexes.\n",
      "    \n",
      "    If joining columns on columns, the DataFrame indexes *will be\n",
      "    ignored*. Otherwise if joining indexes on indexes or indexes on a column or\n",
      "    columns, the index will be passed on.\n",
      "    \n",
      "    Parameters\n",
      "    ----------\n",
      "    left : DataFrame\n",
      "    right : DataFrame\n",
      "    how : {'left', 'right', 'outer', 'inner'}, default 'inner'\n",
      "        * left: use only keys from left frame, similar to a SQL left outer join;\n",
      "          preserve key order\n",
      "        * right: use only keys from right frame, similar to a SQL right outer join;\n",
      "          preserve key order\n",
      "        * outer: use union of keys from both frames, similar to a SQL full outer\n",
      "          join; sort keys lexicographically\n",
      "        * inner: use intersection of keys from both frames, similar to a SQL inner\n",
      "          join; preserve the order of the left keys\n",
      "    on : label or list\n",
      "        Column or index level names to join on. These must be found in both\n",
      "        DataFrames. If `on` is None and not merging on indexes then this defaults\n",
      "        to the intersection of the columns in both DataFrames.\n",
      "    left_on : label or list, or array-like\n",
      "        Column or index level names to join on in the left DataFrame. Can also\n",
      "        be an array or list of arrays of the length of the left DataFrame.\n",
      "        These arrays are treated as if they are columns.\n",
      "    right_on : label or list, or array-like\n",
      "        Column or index level names to join on in the right DataFrame. Can also\n",
      "        be an array or list of arrays of the length of the right DataFrame.\n",
      "        These arrays are treated as if they are columns.\n",
      "    left_index : boolean, default False\n",
      "        Use the index from the left DataFrame as the join key(s). If it is a\n",
      "        MultiIndex, the number of keys in the other DataFrame (either the index\n",
      "        or a number of columns) must match the number of levels\n",
      "    right_index : boolean, default False\n",
      "        Use the index from the right DataFrame as the join key. Same caveats as\n",
      "        left_index\n",
      "    sort : boolean, default False\n",
      "        Sort the join keys lexicographically in the result DataFrame. If False,\n",
      "        the order of the join keys depends on the join type (how keyword)\n",
      "    suffixes : 2-length sequence (tuple, list, ...)\n",
      "        Suffix to apply to overlapping column names in the left and right\n",
      "        side, respectively\n",
      "    copy : boolean, default True\n",
      "        If False, do not copy data unnecessarily\n",
      "    indicator : boolean or string, default False\n",
      "        If True, adds a column to output DataFrame called \"_merge\" with\n",
      "        information on the source of each row.\n",
      "        If string, column with information on source of each row will be added to\n",
      "        output DataFrame, and column will be named value of string.\n",
      "        Information column is Categorical-type and takes on a value of \"left_only\"\n",
      "        for observations whose merge key only appears in 'left' DataFrame,\n",
      "        \"right_only\" for observations whose merge key only appears in 'right'\n",
      "        DataFrame, and \"both\" if the observation's merge key is found in both.\n",
      "    \n",
      "    validate : string, default None\n",
      "        If specified, checks if merge is of specified type.\n",
      "    \n",
      "        * \"one_to_one\" or \"1:1\": check if merge keys are unique in both\n",
      "          left and right datasets.\n",
      "        * \"one_to_many\" or \"1:m\": check if merge keys are unique in left\n",
      "          dataset.\n",
      "        * \"many_to_one\" or \"m:1\": check if merge keys are unique in right\n",
      "          dataset.\n",
      "        * \"many_to_many\" or \"m:m\": allowed, but does not result in checks.\n",
      "    \n",
      "        .. versionadded:: 0.21.0\n",
      "    \n",
      "    Notes\n",
      "    -----\n",
      "    Support for specifying index levels as the `on`, `left_on`, and\n",
      "    `right_on` parameters was added in version 0.23.0\n",
      "    \n",
      "    Examples\n",
      "    --------\n",
      "    \n",
      "    >>> A              >>> B\n",
      "        lkey value         rkey value\n",
      "    0   foo  1         0   foo  5\n",
      "    1   bar  2         1   bar  6\n",
      "    2   baz  3         2   qux  7\n",
      "    3   foo  4         3   bar  8\n",
      "    \n",
      "    >>> A.merge(B, left_on='lkey', right_on='rkey', how='outer')\n",
      "       lkey  value_x  rkey  value_y\n",
      "    0  foo   1        foo   5\n",
      "    1  foo   4        foo   5\n",
      "    2  bar   2        bar   6\n",
      "    3  bar   2        bar   8\n",
      "    4  baz   3        NaN   NaN\n",
      "    5  NaN   NaN      qux   7\n",
      "    \n",
      "    Returns\n",
      "    -------\n",
      "    merged : DataFrame\n",
      "        The output type will the be same as 'left', if it is a subclass\n",
      "        of DataFrame.\n",
      "    \n",
      "    See also\n",
      "    --------\n",
      "    merge_ordered\n",
      "    merge_asof\n",
      "    DataFrame.join\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(pd.merge) #manual"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>name1</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>name2</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>name3</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>name4</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  income\n",
       "0  name1     100\n",
       "1  name2     200\n",
       "2  name3     300\n",
       "3  name4     400"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp1 = pd.DataFrame(dict(name=[\"name1\",\"name2\",\"name3\",\"name4\"],income=[100,200,300,400]))\n",
    "emp1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>name1</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>name2</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>name5</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>name6</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  income\n",
       "0  name1     100\n",
       "1  name2     200\n",
       "2  name5     300\n",
       "3  name6     400"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "emp2 = pd.DataFrame(dict(name=[\"name1\",\"name2\",\"name5\",\"name6\"],income=[100,200,300,400]))\n",
    "emp2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>income_x</th>\n",
       "      <th>income_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>name1</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>name2</td>\n",
       "      <td>200</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  income_x  income_y\n",
       "0  name1       100       100\n",
       "1  name2       200       200"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_inter2 = pd.merge(emp1,emp2,on=\"name\",how=\"inner\")\n",
    "merge_inter2\n",
    "# common on name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>income_x</th>\n",
       "      <th>income_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>name1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>name2</td>\n",
       "      <td>200.0</td>\n",
       "      <td>200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>name3</td>\n",
       "      <td>300.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>name4</td>\n",
       "      <td>400.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>name5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>name6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  income_x  income_y\n",
       "0  name1     100.0     100.0\n",
       "1  name2     200.0     200.0\n",
       "2  name3     300.0       NaN\n",
       "3  name4     400.0       NaN\n",
       "4  name5       NaN     300.0\n",
       "5  name6       NaN     400.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_inter2 = pd.merge(emp1,emp2,on=\"name\",how=\"outer\")\n",
    "merge_inter2\n",
    "# all on name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>income_x</th>\n",
       "      <th>income_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>name1</td>\n",
       "      <td>100</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>name2</td>\n",
       "      <td>200</td>\n",
       "      <td>200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>name3</td>\n",
       "      <td>300</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>name4</td>\n",
       "      <td>400</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  income_x  income_y\n",
       "0  name1       100     100.0\n",
       "1  name2       200     200.0\n",
       "2  name3       300       NaN\n",
       "3  name4       400       NaN"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_inter2 = pd.merge(emp1,emp2,on=\"name\",how=\"left\")\n",
    "merge_inter2\n",
    "# common on name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>income_x</th>\n",
       "      <th>income_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>name1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>name2</td>\n",
       "      <td>200.0</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>name5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>name6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  income_x  income_y\n",
       "0  name1     100.0       100\n",
       "1  name2     200.0       200\n",
       "2  name5       NaN       300\n",
       "3  name6       NaN       400"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_inter2 = pd.merge(emp1,emp2,on=\"name\",how=\"right\")\n",
    "merge_inter2\n",
    "# common on name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    name  age gender         job\n",
      "0  alice   19      F     student\n",
      "1   john   26      M     student\n",
      "0    tom   12      M         cat\n",
      "1  jerry    5      M       mouse\n",
      "0  peter   23      M      beggar\n",
      "1  julie   24      F  billionare\n",
      "\n",
      "    name  age gender      job\n",
      "0  alice   19      F  student\n",
      "1   john   26      M  student\n",
      "0    tom   12      M      cat\n",
      "1  jerry    5      M    mouse\n",
      "0  peter   23      M   beggar\n",
      "\n",
      "    name  age gender         job\n",
      "0  alice   19      F     student\n",
      "1   john   26      M     student\n",
      "0    tom   12      M         cat\n",
      "1  jerry    5      M       mouse\n",
      "0  peter   23      M      beggar\n",
      "1  julie   24      F  billionare\n",
      "\n",
      "    name  age gender         job\n",
      "1   john   26      M     student\n",
      "0    tom   12      M         cat\n",
      "1  jerry    5      M       mouse\n",
      "0  peter   23      M      beggar\n",
      "1  julie   24      F  billionare\n",
      "\n",
      "    name  age gender         job\n",
      "0  alice   19      F     student\n",
      "1   john   26      M     student\n",
      "0    tom   12      M         cat\n",
      "1  jerry    5      M       mouse\n",
      "0  peter   23      M      beggar\n",
      "1  julie   24      F  billionare\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# summarizing\n",
    "print(users)            # prints first & lost 30 rows\n",
    "print(\"\")\n",
    "print(users.head())     # print first 5 rows\n",
    "print(\"\")\n",
    "print(users.head(10))   # print first 10 rows\n",
    "print(\"\")\n",
    "print(users.tail())     # print last 5 rows\n",
    "print(\"\")\n",
    "print(users.tail(10))   # print last 10 rows\n",
    "print(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>18.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.134290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>13.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>21.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>23.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>26.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             age\n",
       "count   6.000000\n",
       "mean   18.166667\n",
       "std     8.134290\n",
       "min     5.000000\n",
       "25%    13.750000\n",
       "50%    21.000000\n",
       "75%    23.750000\n",
       "max    26.000000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.describe()   # all the deails of all the attributes (numeric value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>john</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>18.166667</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>8.134290</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>13.750000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>23.750000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        name        age gender      job\n",
       "count      6   6.000000      6        6\n",
       "unique     6        NaN      2        5\n",
       "top     john        NaN      M  student\n",
       "freq       1        NaN      4        2\n",
       "mean     NaN  18.166667    NaN      NaN\n",
       "std      NaN   8.134290    NaN      NaN\n",
       "min      NaN   5.000000    NaN      NaN\n",
       "25%      NaN  13.750000    NaN      NaN\n",
       "50%      NaN  21.000000    NaN      NaN\n",
       "75%      NaN  23.750000    NaN      NaN\n",
       "max      NaN  26.000000    NaN      NaN"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.describe(include=\"all\")\n",
    "# 25% = first quartile (below which 25% records are there) : outliers\n",
    "# 50% = second quartile (below which 50% records are there) : median\n",
    "# 75% = third quartile (below which 75% records are there)\n",
    "# 100% = fourth quartile (below which 100% records are there) : outliers\n",
    "# below 25% and above 75% ouliers are present"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Int64Index([0, 1, 0, 1, 0, 1], dtype='int64') \n",
      "\n",
      "Index(['name', 'age', 'gender', 'job'], dtype='object') \n",
      "\n",
      "name      object\n",
      "age        int64\n",
      "gender    object\n",
      "job       object\n",
      "dtype: object \n",
      "\n",
      "(6, 4) \n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(users.index,\"\\n\")\n",
    "print(users.columns,\"\\n\")\n",
    "print(users.dtypes,\"\\n\")\n",
    "print(users.shape,\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['alice' 19 'F' 'student']\n",
      " ['john' 26 'M' 'student']\n",
      " ['tom' 12 'M' 'cat']\n",
      " ['jerry' 5 'M' 'mouse']\n",
      " ['peter' 23 'M' 'beggar']\n",
      " ['julie' 24 'F' 'billionare']] \n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 6 entries, 0 to 1\n",
      "Data columns (total 4 columns):\n",
      "name      6 non-null object\n",
      "age       6 non-null int64\n",
      "gender    6 non-null object\n",
      "job       6 non-null object\n",
      "dtypes: int64(1), object(3)\n",
      "memory usage: 240.0+ bytes\n",
      "None \n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(users.values,\"\\n\")\n",
    "print(users.info(),\"\\n\") # info returns None so None on the last line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>john</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        name gender      job\n",
       "count      6      6        6\n",
       "unique     6      2        5\n",
       "top     john      M  student\n",
       "freq       1      4        2"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.describe(include=[\"object\"])\n",
    "# limits to one or more types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    F\n",
       "1    M\n",
       "0    M\n",
       "1    M\n",
       "0    M\n",
       "1    F\n",
       "Name: gender, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#column selection\n",
    "users[\"gender\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(users[\"gender\"]) #return a series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  gender  age\n",
       "0      F   19\n",
       "1      M   26\n",
       "0      M   12\n",
       "1      M    5\n",
       "0      M   23\n",
       "1      F   24"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# selecting multiple columns\n",
    "users[[\"gender\",\"age\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age gender\n",
       "0   19      F\n",
       "1   26      M\n",
       "0   12      M\n",
       "1    5      M\n",
       "0   23      M\n",
       "1   24      F"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_cols = [\"age\",\"gender\"]  #creating list\n",
    "users[my_cols]              # using list to select columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(users[my_cols])  #return a dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name        alice\n",
       "age            19\n",
       "gender          F\n",
       "job       student\n",
       "Name: 0, dtype: object"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# row selection\n",
    "df = users.copy()\n",
    "df.iloc[0]  # selecting first row\n",
    "# iloc is strictly integer position based"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'alice'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[0,0]   # selecting first item of the first row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>anup</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0   anup   19      F     student\n",
       "1   john   26      M     student\n",
       "0    tom   12      M         cat\n",
       "1  jerry    5      M       mouse\n",
       "0  peter   23      M      beggar\n",
       "1  julie   24      F  billionare"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# updating values\n",
    "df.iloc[0,0] = \"anup\"\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6, 4)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\HP\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:4405: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self[name] = value\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>anup</td>\n",
       "      <td>29</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>36</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>22</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>15</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>33</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>34</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0   anup   29      F     student\n",
       "1   john   36      M     student\n",
       "0    tom   22      M         cat\n",
       "1  jerry   15      M       mouse\n",
       "0  peter   33      M      beggar\n",
       "1  julie   34      F  billionare"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(users.shape[0]):\n",
    "    row=df.iloc[i]\n",
    "    row.age+=10    # all updates on the copy of the user\n",
    "    df.iloc[i]=row\n",
    "                   # not on users directly df has got updated but users will not\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0  alice   19      F     student\n",
       "1   john   26      M     student\n",
       "0    tom   12      M         cat\n",
       "1  jerry    5      M       mouse\n",
       "0  peter   23      M      beggar\n",
       "1  julie   24      F  billionare"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ix supports mixed integer and label based access\n",
    "df = users.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender      job\n",
       "0  alice   19      F  student\n",
       "0    tom   12      M      cat\n",
       "1  jerry    5      M    mouse"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# row selecting with filtering\n",
    "users[users.age<20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     True\n",
      "1    False\n",
      "0     True\n",
      "1     True\n",
      "0    False\n",
      "1    False\n",
      "Name: age, dtype: bool\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender      job\n",
       "0  alice   19      F  student\n",
       "0    tom   12      M      cat\n",
       "1  jerry    5      M    mouse"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "young_bool = users.age<20\n",
    "print(young_bool)\n",
    "users[young_bool]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>19</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age      job\n",
       "0   19  student\n",
       "0   12      cat\n",
       "1    5    mouse"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# advanced logical filtering\n",
    "# selecting multiple columns\n",
    "# selection         # projection\n",
    "users[users.age<20][[\"age\",\"job\",]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender      job\n",
       "1   john   26      M  student\n",
       "0  peter   23      M   beggar"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# using multiple conditions\n",
    "users[(users.age>20)&(users.gender==\"M\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender      job\n",
       "0  alice   19      F  student\n",
       "1   john   26      M  student\n",
       "0    tom   12      M      cat\n",
       "1  jerry    5      M    mouse"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# filter specific values, set membership\n",
    "users[users.job.isin([\"student\",\"cat\",\"mouse\"])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     5\n",
       "0    12\n",
       "0    19\n",
       "0    23\n",
       "1    24\n",
       "1    26\n",
       "Name: age, dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sorting \n",
    "df = users.copy()\n",
    "df.age.sort_values()    #works on series only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "1  jerry    5      M       mouse\n",
       "0    tom   12      M         cat\n",
       "0  alice   19      F     student\n",
       "0  peter   23      M      beggar\n",
       "1  julie   24      F  billionare\n",
       "1   john   26      M     student"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values(by=\"age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "1   john   26      M     student\n",
       "1  julie   24      F  billionare\n",
       "0  peter   23      M      beggar\n",
       "0  alice   19      F     student\n",
       "0    tom   12      M         cat\n",
       "1  jerry    5      M       mouse"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values(by=\"age\",ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0  peter   23      M      beggar\n",
       "1  julie   24      F  billionare\n",
       "0    tom   12      M         cat\n",
       "1  jerry    5      M       mouse\n",
       "0  alice   19      F     student\n",
       "1   john   26      M     student"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sort_values(by=[\"job\",\"age\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    name  age gender         job\n",
      "0  alice   19      F     student\n",
      "1   john   26      M     student\n",
      "0    tom   12      M         cat\n",
      "1  jerry    5      M       mouse\n",
      "0  peter   23      M      beggar\n",
      "1  julie   24      F  billionare \n",
      "\n",
      "    name  age gender         job\n",
      "0  peter   23      M      beggar\n",
      "1  julie   24      F  billionare\n",
      "0    tom   12      M         cat\n",
      "1  jerry    5      M       mouse\n",
      "0  alice   19      F     student\n",
      "1   john   26      M     student\n"
     ]
    }
   ],
   "source": [
    "print(df,\"\\n\")\n",
    "df.sort_values(by=[\"job\",\"age\"],inplace=True)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>variable</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>age</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>age</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tom</td>\n",
       "      <td>age</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>jerry</td>\n",
       "      <td>age</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>peter</td>\n",
       "      <td>age</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>julie</td>\n",
       "      <td>age</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>alice</td>\n",
       "      <td>gender</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>john</td>\n",
       "      <td>gender</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>tom</td>\n",
       "      <td>gender</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>jerry</td>\n",
       "      <td>gender</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>peter</td>\n",
       "      <td>gender</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>julie</td>\n",
       "      <td>gender</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>alice</td>\n",
       "      <td>job</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>john</td>\n",
       "      <td>job</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>tom</td>\n",
       "      <td>job</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>jerry</td>\n",
       "      <td>job</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>peter</td>\n",
       "      <td>job</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>julie</td>\n",
       "      <td>job</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     name variable       value\n",
       "0   alice      age          19\n",
       "1    john      age          26\n",
       "2     tom      age          12\n",
       "3   jerry      age           5\n",
       "4   peter      age          23\n",
       "5   julie      age          24\n",
       "6   alice   gender           F\n",
       "7    john   gender           M\n",
       "8     tom   gender           M\n",
       "9   jerry   gender           M\n",
       "10  peter   gender           M\n",
       "11  julie   gender           F\n",
       "12  alice      job     student\n",
       "13   john      job     student\n",
       "14    tom      job         cat\n",
       "15  jerry      job       mouse\n",
       "16  peter      job      beggar\n",
       "17  julie      job  billionare"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reshaping by pivoting\n",
    "# \"Unpivot\" a DataFrame from wise format\n",
    "# to long (stacked) format\n",
    "stacked = pd.melt(users,id_vars=\"name\",var_name=\"variable\",value_name=\"value\")\n",
    "stacked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "variable age gender         job\n",
      "name                           \n",
      "alice     19      F     student\n",
      "jerry      5      M       mouse\n",
      "john      26      M     student\n",
      "julie     24      F  billionare\n",
      "peter     23      M      beggar\n",
      "tom       12      M         cat\n"
     ]
    }
   ],
   "source": [
    "# \"pivots\" a DataFrames from long(stacked)\n",
    "# format to wide format (not a data frame)\n",
    "print(stacked.pivot(index=\"name\",columns=\"variable\",values=\"value\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0  alice   19      F     student\n",
       "1   john   26      M     student\n",
       "2    tom   12      M         cat\n",
       "3  jerry    5      M       mouse\n",
       "4  peter   23      M      beggar\n",
       "5  julie   24      F  billionare\n",
       "6  alice   19      F     student"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# quality control: dealing duplicate data\n",
    "df = users.append(users.iloc[0],ignore_index=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1    False\n",
       "2    False\n",
       "3    False\n",
       "4    False\n",
       "5    False\n",
       "6     True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated()   # series of boolean\n",
    "                 # True, if row is identical to a previous"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender      job\n",
       "6  alice   19      F  student"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# count of duplicates\n",
    "print(df.duplicated().sum())\n",
    "df[df.duplicated()]         #show only duplicated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    False\n",
       "1    False\n",
       "2     True\n",
       "3     True\n",
       "4     True\n",
       "5     True\n",
       "6     True\n",
       "Name: gender, dtype: bool"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.gender.duplicated()\n",
    "# first two rows have different values and then all are repeatition of these values hence true."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated([\"age\",\"gender\"]).sum()    # age and gender same for how many elements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0  alice   19      F     student\n",
       "1   john   26      M     student\n",
       "2    tom   12      M         cat\n",
       "3  jerry    5      M       mouse\n",
       "4  peter   23      M      beggar\n",
       "5  julie   24      F  billionare"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop duplicate rows\n",
    "df=df.drop_duplicates()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>john</td>\n",
       "      <td>NaN</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>18.166667</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>8.134290</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>13.750000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>23.750000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        name        age gender      job\n",
       "count      6   6.000000      6        6\n",
       "unique     6        NaN      2        5\n",
       "top     john        NaN      M  student\n",
       "freq       1        NaN      4        2\n",
       "mean     NaN  18.166667    NaN      NaN\n",
       "std      NaN   8.134290    NaN      NaN\n",
       "min      NaN   5.000000    NaN      NaN\n",
       "25%      NaN  13.750000    NaN      NaN\n",
       "50%      NaN  21.000000    NaN      NaN\n",
       "75%      NaN  23.750000    NaN      NaN\n",
       "max      NaN  26.000000    NaN      NaN"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# quality control : missing data\n",
    "df = users.copy()\n",
    "df.describe(include=\"all\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name    age  gender    job\n",
       "0  False  False   False  False\n",
       "1  False  False   False  False\n",
       "0  False  False   False  False\n",
       "1  False  False   False  False\n",
       "0  False  False   False  False\n",
       "1  False  False   False  False"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# finding missing values in a series\n",
    "df.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name      0\n",
       "age       0\n",
       "gender    0\n",
       "job       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# attribute wise null count\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name  age gender         job\n",
       "0  alice   19      F     student\n",
       "1   john   26      M     student\n",
       "0    tom   12      M         cat\n",
       "1  jerry    5      M       mouse\n",
       "0  peter   23      M      beggar\n",
       "1  julie   24      F  billionare"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop missing values\n",
    "df.dropna()    # dropping rows having null\n",
    "               # in any attribute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_name</th>\n",
       "      <th>new_age</th>\n",
       "      <th>new_gender</th>\n",
       "      <th>new_job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  new_name  new_age new_gender     new_job\n",
       "0    alice       19          F     student\n",
       "1     john       26          M     student\n",
       "0      tom       12          M         cat\n",
       "1    jerry        5          M       mouse\n",
       "0    peter       23          M      beggar\n",
       "1    julie       24          F  billionare"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dropping rows if having : null in all attributes\n",
    "df.dropna(how=\"all\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['name', 'age', 'gender', 'job'], dtype='object')"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# rename values\n",
    "df=users.copy()\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_name</th>\n",
       "      <th>new_age</th>\n",
       "      <th>new_gender</th>\n",
       "      <th>new_job</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>alice</td>\n",
       "      <td>19</td>\n",
       "      <td>F</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>john</td>\n",
       "      <td>26</td>\n",
       "      <td>M</td>\n",
       "      <td>student</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tom</td>\n",
       "      <td>12</td>\n",
       "      <td>M</td>\n",
       "      <td>cat</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>jerry</td>\n",
       "      <td>5</td>\n",
       "      <td>M</td>\n",
       "      <td>mouse</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>peter</td>\n",
       "      <td>23</td>\n",
       "      <td>M</td>\n",
       "      <td>beggar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>julie</td>\n",
       "      <td>24</td>\n",
       "      <td>F</td>\n",
       "      <td>billionare</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  new_name  new_age new_gender     new_job\n",
       "0    alice       19          F     student\n",
       "1     john       26          M     student\n",
       "0      tom       12          M         cat\n",
       "1    jerry        5          M       mouse\n",
       "0    peter       23          M      beggar\n",
       "1    julie       24          F  billionare"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns=[\"new_name\",\"new_age\",\"new_gender\",\"new_job\"]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "beggar \n",
      "     name  age gender     job\n",
      "0  peter   23      M  beggar\n",
      "billionare \n",
      "     name  age gender         job\n",
      "1  julie   24      F  billionare\n",
      "cat \n",
      "   name  age gender  job\n",
      "0  tom   12      M  cat\n",
      "mouse \n",
      "     name  age gender    job\n",
      "1  jerry    5      M  mouse\n",
      "student \n",
      "     name  age gender      job\n",
      "0  alice   19      F  student\n",
      "1   john   26      M  student\n"
     ]
    }
   ],
   "source": [
    "# dealing with groupby\n",
    "for grp, data in users.groupby(\"job\"):\n",
    "    print(grp,\"\\n\",data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>salary</th>\n",
       "      <th>experience</th>\n",
       "      <th>education</th>\n",
       "      <th>management</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13876</td>\n",
       "      <td>1</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11608</td>\n",
       "      <td>1</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18701</td>\n",
       "      <td>1</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11283</td>\n",
       "      <td>1</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11767</td>\n",
       "      <td>1</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>20872</td>\n",
       "      <td>2</td>\n",
       "      <td>Master</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>11772</td>\n",
       "      <td>2</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10535</td>\n",
       "      <td>2</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>12195</td>\n",
       "      <td>2</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>12313</td>\n",
       "      <td>3</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>14975</td>\n",
       "      <td>3</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>21371</td>\n",
       "      <td>3</td>\n",
       "      <td>Master</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>19800</td>\n",
       "      <td>3</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11417</td>\n",
       "      <td>4</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>20263</td>\n",
       "      <td>4</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>13231</td>\n",
       "      <td>4</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>12884</td>\n",
       "      <td>4</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>13245</td>\n",
       "      <td>5</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>13677</td>\n",
       "      <td>5</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>15965</td>\n",
       "      <td>5</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>12336</td>\n",
       "      <td>6</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21352</td>\n",
       "      <td>6</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>13839</td>\n",
       "      <td>6</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>22884</td>\n",
       "      <td>6</td>\n",
       "      <td>Master</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>16978</td>\n",
       "      <td>7</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>14803</td>\n",
       "      <td>8</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>17404</td>\n",
       "      <td>8</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>22184</td>\n",
       "      <td>8</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>13548</td>\n",
       "      <td>8</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>14467</td>\n",
       "      <td>10</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>15942</td>\n",
       "      <td>10</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>23174</td>\n",
       "      <td>10</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>23780</td>\n",
       "      <td>10</td>\n",
       "      <td>Master</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>25410</td>\n",
       "      <td>11</td>\n",
       "      <td>Master</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>14861</td>\n",
       "      <td>11</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>16882</td>\n",
       "      <td>12</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>24170</td>\n",
       "      <td>12</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>15990</td>\n",
       "      <td>13</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>26330</td>\n",
       "      <td>13</td>\n",
       "      <td>Master</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>17949</td>\n",
       "      <td>14</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>25685</td>\n",
       "      <td>15</td>\n",
       "      <td>Ph.D</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>27837</td>\n",
       "      <td>16</td>\n",
       "      <td>Master</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>18838</td>\n",
       "      <td>16</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>17483</td>\n",
       "      <td>16</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>19207</td>\n",
       "      <td>17</td>\n",
       "      <td>Master</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>19346</td>\n",
       "      <td>20</td>\n",
       "      <td>Bachelor</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    salary  experience education management\n",
       "0    13876           1  Bachelor          Y\n",
       "1    11608           1      Ph.D          N\n",
       "2    18701           1      Ph.D          Y\n",
       "3    11283           1    Master          N\n",
       "4    11767           1      Ph.D          N\n",
       "5    20872           2    Master          Y\n",
       "6    11772           2    Master          N\n",
       "7    10535           2  Bachelor          N\n",
       "8    12195           2      Ph.D          N\n",
       "9    12313           3    Master          N\n",
       "10   14975           3  Bachelor          Y\n",
       "11   21371           3    Master          Y\n",
       "12   19800           3      Ph.D          Y\n",
       "13   11417           4  Bachelor          N\n",
       "14   20263           4      Ph.D          Y\n",
       "15   13231           4      Ph.D          N\n",
       "16   12884           4    Master          N\n",
       "17   13245           5    Master          N\n",
       "18   13677           5      Ph.D          N\n",
       "19   15965           5  Bachelor          Y\n",
       "20   12336           6  Bachelor          N\n",
       "21   21352           6      Ph.D          Y\n",
       "22   13839           6    Master          N\n",
       "23   22884           6    Master          Y\n",
       "24   16978           7  Bachelor          Y\n",
       "25   14803           8    Master          N\n",
       "26   17404           8  Bachelor          Y\n",
       "27   22184           8      Ph.D          Y\n",
       "28   13548           8  Bachelor          N\n",
       "29   14467          10  Bachelor          N\n",
       "30   15942          10    Master          N\n",
       "31   23174          10      Ph.D          Y\n",
       "32   23780          10    Master          Y\n",
       "33   25410          11    Master          Y\n",
       "34   14861          11  Bachelor          N\n",
       "35   16882          12    Master          N\n",
       "36   24170          12      Ph.D          Y\n",
       "37   15990          13  Bachelor          N\n",
       "38   26330          13    Master          Y\n",
       "39   17949          14    Master          N\n",
       "40   25685          15      Ph.D          Y\n",
       "41   27837          16    Master          Y\n",
       "42   18838          16    Master          N\n",
       "43   17483          16  Bachelor          N\n",
       "44   19207          17    Master          N\n",
       "45   19346          20  Bachelor          N"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reading csv file on to DataFrame\n",
    "try:\n",
    "    pd1=pd.read_csv(\"D:\\ML Batch\\salary_table.csv\")\n",
    "except:\n",
    "    url=\"httpds://url.for.csv.file\"\n",
    "    pd1=pd.read_csv(url)\n",
    "pd1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_STATUS</th>\n",
       "      <th>EMPLOYER_NAME</th>\n",
       "      <th>SOC_NAME</th>\n",
       "      <th>JOB_TITLE</th>\n",
       "      <th>FULL_TIME_POSITION</th>\n",
       "      <th>PREVAILING_WAGE</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>WORKSITE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>60133.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>RANCHO CORDOVA, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>61069.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>TAMPA, FLORIDA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR MANAGER JC45 - MANAGEMENT ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>117229.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>LOS ANGELES, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>MANAGER JC50 - MANAGEMENT ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>80475.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MILWAUKEE, WISCONSIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DENIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>74048.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>HARTFORD, CONNECTICUT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>DENIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>62837.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>CLEVELAND, OHIO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>INFOSYS LIMITED</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>ASSOCIATE MANAGER - CORPORATE FINANCE</td>\n",
       "      <td>Y</td>\n",
       "      <td>93746.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>PLANO, TEXAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>MITHANI ENTERPRISES, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>47965.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>JOHNS CREEK, GEORGIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>MITHANI ENTERPRISES, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>47965.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>JOHNS CREEK, GEORGIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>THEOREM LLP</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>N</td>\n",
       "      <td>47445.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>EL SEGUNDO, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>CLARK NUBER, P.S.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>TAX SENIOR ACCOUNTANT - INTERNATIONAL AND PROV...</td>\n",
       "      <td>N</td>\n",
       "      <td>63690.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>BELLEVUE, WASHINGTON</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>SEILER, LLP</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>TAX SENIOR</td>\n",
       "      <td>N</td>\n",
       "      <td>57304.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>REDWOOD CITY, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>OHIOHEALTH CORP.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>FINANCIAL ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>45698.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>COLUMBUS, OHIO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>IPS FUND SERVICES LLC</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>OPERATIONS ASSOCIATE</td>\n",
       "      <td>N</td>\n",
       "      <td>47500.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>BOSTON, MASSACHUSETTS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>AMERICAN POLITICAL SCIENCE ASSOCIATION</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>46924.8</td>\n",
       "      <td>2016</td>\n",
       "      <td>WASHINGTON, DISTRICT OF COLUMBIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>CONNEXALL USA, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>46051.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>BOULDER, COLORADO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ENGAGED IN LIFE LLC</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT I</td>\n",
       "      <td>N</td>\n",
       "      <td>39728.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>PARKVILLE, MISSOURI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>AMERICAN POLITICAL SCIENCE ASSOCIATION</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>46924.8</td>\n",
       "      <td>2016</td>\n",
       "      <td>WASHINGTON, DISTRICT OF COLUMBIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>SHAUL &amp; DESMOND PLLC</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>44491.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>WEST DES MOINES, IOWA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ZHAI &amp; WANG, LLP</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>58177.6</td>\n",
       "      <td>2016</td>\n",
       "      <td>SAN JOSE, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>LOUIS PLUNG &amp; COMPANY LLP</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>TAX ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>43430.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>PITTSBURGH, PENNSYLVANIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>AMI SHAH CPA</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>58177.6</td>\n",
       "      <td>2016</td>\n",
       "      <td>SAN JOSE, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>CENTRE LAW &amp; CONSULTING LLC</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>52500.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>VIENNA, VIRGINIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>HARDING SHYMANSKI &amp; COMPANY, PSC</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ASSOCIATE, ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>50690.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>LOUISVILLE, KENTUCKY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>DOUBLE QUICK, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>ACCOUNTING ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>34757.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>INDIANOLA, MISSISSIPPI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>PAPER STREET REALTY, LLC</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>42848.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>CHICAGO, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>SEILER, LLP</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>57304.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>REDWOOD CITY, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ORBBEC 3D TECHNOLOGY INTERNATIONAL, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>44262.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>TROY, MICHIGAN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>G.C. CONSULTANTS, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>55370.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>NEW YORK, NEW YORK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>DENIED</td>\n",
       "      <td>G.C. CONSULTANTS, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>ACCOUNTANT</td>\n",
       "      <td>Y</td>\n",
       "      <td>119192320.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>SAN FRANCISCO, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4970</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>PRICEWATERHOUSECOOPERS LLP</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>ASSURANCE ASSOCIATE</td>\n",
       "      <td>Y</td>\n",
       "      <td>52187.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>TAMPA, FLORIDA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4971</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>BDSN INTERNATIONAL INC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>BUSINESS  ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>55245.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>NORTHBROOK, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4972</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>YES HARDSOFT SOLUTIONS, INC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>68037.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>EAST WINDSOR, NEW JERSEY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4973</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>SMART SOURCE USA, LLC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>54662.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>ROCKLEDGE, FLORIDA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4974</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ACCENTURE LLP</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST 3</td>\n",
       "      <td>Y</td>\n",
       "      <td>72946.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>SOUTH JORDAN, UTAH</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4975</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COMPUGA INC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>75046.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>SAN FRANCISCO, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4976</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>EZ2 TECHNOLOGIES, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>58053.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>COLUMBIA, SOUTH CAROLINA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4977</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ETOUCH SYSTEMS CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>BI ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>60091.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>THE WOODLANDS, TEXAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4978</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>LORSHI SYSTEMS, LLC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROGRAMMER ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>52187.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>TAMPA, FLORIDA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4979</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ASAR AMERICA, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>67808.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>WARRENVILLE, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4980</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>NTT DATA, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>68328.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>BLOOMINGTON, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4981</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>VYPAK CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>65083.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>METUCHEN, NEW JERSEY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4982</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>MPHASIS CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>65083.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>FORT WORTH, TEXAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4983</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>TEKCOMMANDS INC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>52603.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>FARMINGTON HILLS, MICHIGAN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4984</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>HCENTIVE INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>ASSOCIATE BUSINESS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>67621.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>RESTON, VIRGINIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4985</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>AVANSYS, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROGRAMMER ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>68162.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>BELLEVUE, WASHINGTON</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4986</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>SILICON STAFF IT SERVICES, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROGRAMMER/SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>62317.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>SANTA ANA, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4987</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>S3 INFOTECH INCORPORATED</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>55245.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>SCHAUMBURG, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4988</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>UNITED IT SOLUTIONS INC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>58885.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>IRVING, TEXAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4989</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>TEXARA SOLUTIONS LLC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>QA SYSTEMS ANALYSTS</td>\n",
       "      <td>Y</td>\n",
       "      <td>66602.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>MILPITAS, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4990</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>GLOBAL DATA SOLUTIONS, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>60091.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>BLOOMINGTON, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4991</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>IBM INDIA PVT LIMITED</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PACKAGE SOLUTION CONSULTANT</td>\n",
       "      <td>Y</td>\n",
       "      <td>67808.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>CHICAGO, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4992</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>SKY SOLUTIONS LLC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>67621.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>CHANTILLY, VIRGINIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4993</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ADROIX CORP.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>46904.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>ALPHARETTA, GEORGIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4994</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>INTEGRATED TECHNOLOGY SERVICES, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>BUSINESS ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>67620.8</td>\n",
       "      <td>2015</td>\n",
       "      <td>HERNDON, VIRGINIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ENDUE CORP.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROGRAMMER ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>60549.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>WESTBOROUGH, MASSACHUSETTS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>INFOSYS LIMITED</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROJECT MANAGER - US</td>\n",
       "      <td>Y</td>\n",
       "      <td>83158.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>MOUNDS VIEW, MINNESOTA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ORPINE, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>TEAM LEAD</td>\n",
       "      <td>Y</td>\n",
       "      <td>46904.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>ALPHARETTA, GEORGIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>LENORA SYSTEMS INC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROGRAMMER ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>58885.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>DALLAS, TEXAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>VECTRATEK SOLUTIONS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>55245.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>OAKBROOK, ILLINOIS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5000 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CASE_STATUS                                    EMPLOYER_NAME  \\\n",
       "0      CERTIFIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "1      CERTIFIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "2      CERTIFIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "3      CERTIFIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "4         DENIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "5         DENIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "6      CERTIFIED                                  INFOSYS LIMITED   \n",
       "7      CERTIFIED                        MITHANI ENTERPRISES, INC.   \n",
       "8      CERTIFIED                        MITHANI ENTERPRISES, INC.   \n",
       "9      CERTIFIED                                      THEOREM LLP   \n",
       "10     CERTIFIED                                CLARK NUBER, P.S.   \n",
       "11     CERTIFIED                                      SEILER, LLP   \n",
       "12     CERTIFIED                                 OHIOHEALTH CORP.   \n",
       "13     CERTIFIED                            IPS FUND SERVICES LLC   \n",
       "14     CERTIFIED           AMERICAN POLITICAL SCIENCE ASSOCIATION   \n",
       "15     CERTIFIED                              CONNEXALL USA, INC.   \n",
       "16     CERTIFIED                              ENGAGED IN LIFE LLC   \n",
       "17     CERTIFIED           AMERICAN POLITICAL SCIENCE ASSOCIATION   \n",
       "18     CERTIFIED                             SHAUL & DESMOND PLLC   \n",
       "19     CERTIFIED                                 ZHAI & WANG, LLP   \n",
       "20     CERTIFIED                        LOUIS PLUNG & COMPANY LLP   \n",
       "21     CERTIFIED                                     AMI SHAH CPA   \n",
       "22     CERTIFIED                      CENTRE LAW & CONSULTING LLC   \n",
       "23     CERTIFIED                 HARDING SHYMANSKI & COMPANY, PSC   \n",
       "24     CERTIFIED                               DOUBLE QUICK, INC.   \n",
       "25     CERTIFIED                         PAPER STREET REALTY, LLC   \n",
       "26     CERTIFIED                                      SEILER, LLP   \n",
       "27     CERTIFIED         ORBBEC 3D TECHNOLOGY INTERNATIONAL, INC.   \n",
       "28     CERTIFIED                           G.C. CONSULTANTS, INC.   \n",
       "29        DENIED                           G.C. CONSULTANTS, INC.   \n",
       "...          ...                                              ...   \n",
       "4970   CERTIFIED                       PRICEWATERHOUSECOOPERS LLP   \n",
       "4971   CERTIFIED                           BDSN INTERNATIONAL INC   \n",
       "4972   CERTIFIED                      YES HARDSOFT SOLUTIONS, INC   \n",
       "4973   CERTIFIED                            SMART SOURCE USA, LLC   \n",
       "4974   CERTIFIED                                    ACCENTURE LLP   \n",
       "4975   CERTIFIED                                      COMPUGA INC   \n",
       "4976   CERTIFIED                           EZ2 TECHNOLOGIES, INC.   \n",
       "4977   CERTIFIED                       ETOUCH SYSTEMS CORPORATION   \n",
       "4978   CERTIFIED                              LORSHI SYSTEMS, LLC   \n",
       "4979   CERTIFIED                               ASAR AMERICA, INC.   \n",
       "4980   CERTIFIED                                   NTT DATA, INC.   \n",
       "4981   CERTIFIED                                VYPAK CORPORATION   \n",
       "4982   CERTIFIED                              MPHASIS CORPORATION   \n",
       "4983   CERTIFIED                                  TEKCOMMANDS INC   \n",
       "4984   CERTIFIED                                    HCENTIVE INC.   \n",
       "4985   CERTIFIED                                    AVANSYS, INC.   \n",
       "4986   CERTIFIED                  SILICON STAFF IT SERVICES, INC.   \n",
       "4987   CERTIFIED                         S3 INFOTECH INCORPORATED   \n",
       "4988   CERTIFIED                          UNITED IT SOLUTIONS INC   \n",
       "4989   CERTIFIED                             TEXARA SOLUTIONS LLC   \n",
       "4990   CERTIFIED                      GLOBAL DATA SOLUTIONS, INC.   \n",
       "4991   CERTIFIED                            IBM INDIA PVT LIMITED   \n",
       "4992   CERTIFIED                                SKY SOLUTIONS LLC   \n",
       "4993   CERTIFIED                                     ADROIX CORP.   \n",
       "4994   CERTIFIED             INTEGRATED TECHNOLOGY SERVICES, INC.   \n",
       "4995   CERTIFIED                                      ENDUE CORP.   \n",
       "4996   CERTIFIED                                  INFOSYS LIMITED   \n",
       "4997   CERTIFIED                                     ORPINE, INC.   \n",
       "4998   CERTIFIED                               LENORA SYSTEMS INC   \n",
       "4999   CERTIFIED                              VECTRATEK SOLUTIONS   \n",
       "\n",
       "                       SOC_NAME  \\\n",
       "0     COMPUTER SYSTEMS ANALYSTS   \n",
       "1     COMPUTER SYSTEMS ANALYSTS   \n",
       "2     COMPUTER SYSTEMS ANALYSTS   \n",
       "3     COMPUTER SYSTEMS ANALYSTS   \n",
       "4     COMPUTER SYSTEMS ANALYSTS   \n",
       "5     COMPUTER SYSTEMS ANALYSTS   \n",
       "6                   ACCOUNTANTS   \n",
       "7                   ACCOUNTANTS   \n",
       "8                   ACCOUNTANTS   \n",
       "9                   ACCOUNTANTS   \n",
       "10                  ACCOUNTANTS   \n",
       "11                  ACCOUNTANTS   \n",
       "12                  ACCOUNTANTS   \n",
       "13                  ACCOUNTANTS   \n",
       "14                  ACCOUNTANTS   \n",
       "15                  ACCOUNTANTS   \n",
       "16                  ACCOUNTANTS   \n",
       "17                  ACCOUNTANTS   \n",
       "18                  ACCOUNTANTS   \n",
       "19                  ACCOUNTANTS   \n",
       "20                  ACCOUNTANTS   \n",
       "21                  ACCOUNTANTS   \n",
       "22                  ACCOUNTANTS   \n",
       "23                  ACCOUNTANTS   \n",
       "24                  ACCOUNTANTS   \n",
       "25                  ACCOUNTANTS   \n",
       "26                  ACCOUNTANTS   \n",
       "27                  ACCOUNTANTS   \n",
       "28                  ACCOUNTANTS   \n",
       "29                  ACCOUNTANTS   \n",
       "...                         ...   \n",
       "4970  COMPUTER SYSTEMS ANALYSTS   \n",
       "4971  COMPUTER SYSTEMS ANALYSTS   \n",
       "4972  COMPUTER SYSTEMS ANALYSTS   \n",
       "4973  COMPUTER SYSTEMS ANALYSTS   \n",
       "4974  COMPUTER SYSTEMS ANALYSTS   \n",
       "4975  COMPUTER SYSTEMS ANALYSTS   \n",
       "4976  COMPUTER SYSTEMS ANALYSTS   \n",
       "4977  COMPUTER SYSTEMS ANALYSTS   \n",
       "4978  COMPUTER SYSTEMS ANALYSTS   \n",
       "4979  COMPUTER SYSTEMS ANALYSTS   \n",
       "4980  COMPUTER SYSTEMS ANALYSTS   \n",
       "4981  COMPUTER SYSTEMS ANALYSTS   \n",
       "4982  COMPUTER SYSTEMS ANALYSTS   \n",
       "4983  COMPUTER SYSTEMS ANALYSTS   \n",
       "4984  COMPUTER SYSTEMS ANALYSTS   \n",
       "4985  COMPUTER SYSTEMS ANALYSTS   \n",
       "4986  COMPUTER SYSTEMS ANALYSTS   \n",
       "4987  COMPUTER SYSTEMS ANALYSTS   \n",
       "4988  COMPUTER SYSTEMS ANALYSTS   \n",
       "4989  COMPUTER SYSTEMS ANALYSTS   \n",
       "4990  COMPUTER SYSTEMS ANALYSTS   \n",
       "4991  COMPUTER SYSTEMS ANALYSTS   \n",
       "4992  COMPUTER SYSTEMS ANALYSTS   \n",
       "4993  COMPUTER SYSTEMS ANALYSTS   \n",
       "4994  COMPUTER SYSTEMS ANALYSTS   \n",
       "4995  COMPUTER SYSTEMS ANALYSTS   \n",
       "4996  COMPUTER SYSTEMS ANALYSTS   \n",
       "4997  COMPUTER SYSTEMS ANALYSTS   \n",
       "4998  COMPUTER SYSTEMS ANALYSTS   \n",
       "4999  COMPUTER SYSTEMS ANALYSTS   \n",
       "\n",
       "                                              JOB_TITLE FULL_TIME_POSITION  \\\n",
       "0            SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST                  N   \n",
       "1            SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST                  N   \n",
       "2              SENIOR MANAGER JC45 - MANAGEMENT ANALYST                  Y   \n",
       "3                     MANAGER JC50 - MANAGEMENT ANALYST                  Y   \n",
       "4            SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST                  Y   \n",
       "5            SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST                  N   \n",
       "6                 ASSOCIATE MANAGER - CORPORATE FINANCE                  Y   \n",
       "7                                      STAFF ACCOUNTANT                  N   \n",
       "8                                      STAFF ACCOUNTANT                  N   \n",
       "9                                           ACCOUNTANTS                  N   \n",
       "10    TAX SENIOR ACCOUNTANT - INTERNATIONAL AND PROV...                  N   \n",
       "11                                           TAX SENIOR                  N   \n",
       "12                                    FINANCIAL ANALYST                  N   \n",
       "13                                 OPERATIONS ASSOCIATE                  N   \n",
       "14                                     STAFF ACCOUNTANT                  N   \n",
       "15                                     STAFF ACCOUNTANT                  N   \n",
       "16                                   STAFF ACCOUNTANT I                  N   \n",
       "17                                     STAFF ACCOUNTANT                  N   \n",
       "18                                     STAFF ACCOUNTANT                  N   \n",
       "19                                     STAFF ACCOUNTANT                  N   \n",
       "20                                       TAX ACCOUNTANT                  N   \n",
       "21                                     STAFF ACCOUNTANT                  N   \n",
       "22                                     STAFF ACCOUNTANT                  N   \n",
       "23                          STAFF ASSOCIATE, ACCOUNTANT                  N   \n",
       "24                                   ACCOUNTING ANALYST                  N   \n",
       "25                                     STAFF ACCOUNTANT                  N   \n",
       "26                                     STAFF ACCOUNTANT                  N   \n",
       "27                                           ACCOUNTANT                  N   \n",
       "28                                           ACCOUNTANT                  N   \n",
       "29                                           ACCOUNTANT                  Y   \n",
       "...                                                 ...                ...   \n",
       "4970                                ASSURANCE ASSOCIATE                  Y   \n",
       "4971                                  BUSINESS  ANALYST                  Y   \n",
       "4972                                    SYSTEMS ANALYST                  Y   \n",
       "4973                           COMPUTER SYSTEMS ANALYST                  Y   \n",
       "4974                         COMPUTER SYSTEMS ANALYST 3                  Y   \n",
       "4975                                    SYSTEMS ANALYST                  Y   \n",
       "4976                           COMPUTER SYSTEMS ANALYST                  Y   \n",
       "4977                                         BI ANALYST                  Y   \n",
       "4978                                 PROGRAMMER ANALYST                  Y   \n",
       "4979                           COMPUTER SYSTEMS ANALYST                  Y   \n",
       "4980                           COMPUTER SYSTEMS ANALYST                  Y   \n",
       "4981                                    SYSTEMS ANALYST                  Y   \n",
       "4982                             SENIOR SYSTEMS ANALYST                  Y   \n",
       "4983                           COMPUTER SYSTEMS ANALYST                  Y   \n",
       "4984                         ASSOCIATE BUSINESS ANALYST                  Y   \n",
       "4985                                 PROGRAMMER ANALYST                  Y   \n",
       "4986                         PROGRAMMER/SYSTEMS ANALYST                  Y   \n",
       "4987                           COMPUTER SYSTEMS ANALYST                  Y   \n",
       "4988                                    SYSTEMS ANALYST                  Y   \n",
       "4989                                QA SYSTEMS ANALYSTS                  Y   \n",
       "4990                                    SYSTEMS ANALYST                  Y   \n",
       "4991                        PACKAGE SOLUTION CONSULTANT                  Y   \n",
       "4992                           COMPUTER SYSTEMS ANALYST                  Y   \n",
       "4993                                    SYSTEMS ANALYST                  Y   \n",
       "4994                                   BUSINESS ANALYST                  N   \n",
       "4995                                 PROGRAMMER ANALYST                  Y   \n",
       "4996                               PROJECT MANAGER - US                  Y   \n",
       "4997                                          TEAM LEAD                  Y   \n",
       "4998                                 PROGRAMMER ANALYST                  Y   \n",
       "4999                           COMPUTER SYSTEMS ANALYST                  Y   \n",
       "\n",
       "      PREVAILING_WAGE  YEAR                          WORKSITE  \n",
       "0             60133.0  2016        RANCHO CORDOVA, CALIFORNIA  \n",
       "1             61069.0  2016                    TAMPA, FLORIDA  \n",
       "2            117229.0  2016           LOS ANGELES, CALIFORNIA  \n",
       "3             80475.0  2016              MILWAUKEE, WISCONSIN  \n",
       "4             74048.0  2016             HARTFORD, CONNECTICUT  \n",
       "5             62837.0  2016                   CLEVELAND, OHIO  \n",
       "6             93746.0  2016                      PLANO, TEXAS  \n",
       "7             47965.0  2016              JOHNS CREEK, GEORGIA  \n",
       "8             47965.0  2016              JOHNS CREEK, GEORGIA  \n",
       "9             47445.0  2016            EL SEGUNDO, CALIFORNIA  \n",
       "10            63690.0  2016              BELLEVUE, WASHINGTON  \n",
       "11            57304.0  2016          REDWOOD CITY, CALIFORNIA  \n",
       "12            45698.0  2016                    COLUMBUS, OHIO  \n",
       "13            47500.0  2016             BOSTON, MASSACHUSETTS  \n",
       "14            46924.8  2016  WASHINGTON, DISTRICT OF COLUMBIA  \n",
       "15            46051.0  2016                 BOULDER, COLORADO  \n",
       "16            39728.0  2016               PARKVILLE, MISSOURI  \n",
       "17            46924.8  2016  WASHINGTON, DISTRICT OF COLUMBIA  \n",
       "18            44491.0  2016             WEST DES MOINES, IOWA  \n",
       "19            58177.6  2016              SAN JOSE, CALIFORNIA  \n",
       "20            43430.0  2016          PITTSBURGH, PENNSYLVANIA  \n",
       "21            58177.6  2016              SAN JOSE, CALIFORNIA  \n",
       "22            52500.0  2016                  VIENNA, VIRGINIA  \n",
       "23            50690.0  2016              LOUISVILLE, KENTUCKY  \n",
       "24            34757.0  2016            INDIANOLA, MISSISSIPPI  \n",
       "25            42848.0  2016                 CHICAGO, ILLINOIS  \n",
       "26            57304.0  2016          REDWOOD CITY, CALIFORNIA  \n",
       "27            44262.0  2016                    TROY, MICHIGAN  \n",
       "28            55370.0  2016                NEW YORK, NEW YORK  \n",
       "29        119192320.0  2016         SAN FRANCISCO, CALIFORNIA  \n",
       "...               ...   ...                               ...  \n",
       "4970          52187.0  2015                    TAMPA, FLORIDA  \n",
       "4971          55245.0  2015              NORTHBROOK, ILLINOIS  \n",
       "4972          68037.0  2015          EAST WINDSOR, NEW JERSEY  \n",
       "4973          54662.0  2015                ROCKLEDGE, FLORIDA  \n",
       "4974          72946.0  2015                SOUTH JORDAN, UTAH  \n",
       "4975          75046.0  2015         SAN FRANCISCO, CALIFORNIA  \n",
       "4976          58053.0  2015          COLUMBIA, SOUTH CAROLINA  \n",
       "4977          60091.0  2015              THE WOODLANDS, TEXAS  \n",
       "4978          52187.0  2015                    TAMPA, FLORIDA  \n",
       "4979          67808.0  2015             WARRENVILLE, ILLINOIS  \n",
       "4980          68328.0  2015             BLOOMINGTON, ILLINOIS  \n",
       "4981          65083.0  2015              METUCHEN, NEW JERSEY  \n",
       "4982          65083.0  2015                 FORT WORTH, TEXAS  \n",
       "4983          52603.0  2015        FARMINGTON HILLS, MICHIGAN  \n",
       "4984          67621.0  2015                  RESTON, VIRGINIA  \n",
       "4985          68162.0  2015              BELLEVUE, WASHINGTON  \n",
       "4986          62317.0  2015             SANTA ANA, CALIFORNIA  \n",
       "4987          55245.0  2015              SCHAUMBURG, ILLINOIS  \n",
       "4988          58885.0  2015                     IRVING, TEXAS  \n",
       "4989          66602.0  2015              MILPITAS, CALIFORNIA  \n",
       "4990          60091.0  2015             BLOOMINGTON, ILLINOIS  \n",
       "4991          67808.0  2015                 CHICAGO, ILLINOIS  \n",
       "4992          67621.0  2015               CHANTILLY, VIRGINIA  \n",
       "4993          46904.0  2015               ALPHARETTA, GEORGIA  \n",
       "4994          67620.8  2015                 HERNDON, VIRGINIA  \n",
       "4995          60549.0  2015        WESTBOROUGH, MASSACHUSETTS  \n",
       "4996          83158.0  2015            MOUNDS VIEW, MINNESOTA  \n",
       "4997          46904.0  2015               ALPHARETTA, GEORGIA  \n",
       "4998          58885.0  2015                     DALLAS, TEXAS  \n",
       "4999          55245.0  2015                OAKBROOK, ILLINOIS  \n",
       "\n",
       "[5000 rows x 8 columns]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "try:\n",
    "    pd2=pd.read_csv(\"D:\\ML Batch\\data.csv\")\n",
    "except:\n",
    "    url=\"https://raw.githubusercontent.com/neurospin/pystatml/master/data/salary_table.csv\"\n",
    "    pd2=pd.read_csv(url)\n",
    "pd2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_STATUS</th>\n",
       "      <th>EMPLOYER_NAME</th>\n",
       "      <th>SOC_NAME</th>\n",
       "      <th>JOB_TITLE</th>\n",
       "      <th>FULL_TIME_POSITION</th>\n",
       "      <th>PREVAILING_WAGE</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>WORKSITE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>60133.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>RANCHO CORDOVA, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>61069.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>TAMPA, FLORIDA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR MANAGER JC45 - MANAGEMENT ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>117229.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>LOS ANGELES, CALIFORNIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>MANAGER JC50 - MANAGEMENT ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>80475.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>MILWAUKEE, WISCONSIN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DENIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>74048.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>HARTFORD, CONNECTICUT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>DENIED</td>\n",
       "      <td>COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>62837.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>CLEVELAND, OHIO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>INFOSYS LIMITED</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>ASSOCIATE MANAGER - CORPORATE FINANCE</td>\n",
       "      <td>Y</td>\n",
       "      <td>93746.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>PLANO, TEXAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>MITHANI ENTERPRISES, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>47965.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>JOHNS CREEK, GEORGIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>MITHANI ENTERPRISES, INC.</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>STAFF ACCOUNTANT</td>\n",
       "      <td>N</td>\n",
       "      <td>47965.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>JOHNS CREEK, GEORGIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>THEOREM LLP</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>ACCOUNTANTS</td>\n",
       "      <td>N</td>\n",
       "      <td>47445.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>EL SEGUNDO, CALIFORNIA</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  CASE_STATUS                                    EMPLOYER_NAME  \\\n",
       "0   CERTIFIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "1   CERTIFIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "2   CERTIFIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "3   CERTIFIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "4      DENIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "5      DENIED  COGNIZANT TECHNOLOGY SOLUTIONS U.S. CORPORATION   \n",
       "6   CERTIFIED                                  INFOSYS LIMITED   \n",
       "7   CERTIFIED                        MITHANI ENTERPRISES, INC.   \n",
       "8   CERTIFIED                        MITHANI ENTERPRISES, INC.   \n",
       "9   CERTIFIED                                      THEOREM LLP   \n",
       "\n",
       "                    SOC_NAME                                   JOB_TITLE  \\\n",
       "0  COMPUTER SYSTEMS ANALYSTS  SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST   \n",
       "1  COMPUTER SYSTEMS ANALYSTS  SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST   \n",
       "2  COMPUTER SYSTEMS ANALYSTS    SENIOR MANAGER JC45 - MANAGEMENT ANALYST   \n",
       "3  COMPUTER SYSTEMS ANALYSTS           MANAGER JC50 - MANAGEMENT ANALYST   \n",
       "4  COMPUTER SYSTEMS ANALYSTS  SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST   \n",
       "5  COMPUTER SYSTEMS ANALYSTS  SENIOR ASSOCIATE JC60 - MANAGEMENT ANALYST   \n",
       "6                ACCOUNTANTS       ASSOCIATE MANAGER - CORPORATE FINANCE   \n",
       "7                ACCOUNTANTS                            STAFF ACCOUNTANT   \n",
       "8                ACCOUNTANTS                            STAFF ACCOUNTANT   \n",
       "9                ACCOUNTANTS                                 ACCOUNTANTS   \n",
       "\n",
       "  FULL_TIME_POSITION  PREVAILING_WAGE  YEAR                    WORKSITE  \n",
       "0                  N          60133.0  2016  RANCHO CORDOVA, CALIFORNIA  \n",
       "1                  N          61069.0  2016              TAMPA, FLORIDA  \n",
       "2                  Y         117229.0  2016     LOS ANGELES, CALIFORNIA  \n",
       "3                  Y          80475.0  2016        MILWAUKEE, WISCONSIN  \n",
       "4                  Y          74048.0  2016       HARTFORD, CONNECTICUT  \n",
       "5                  N          62837.0  2016             CLEVELAND, OHIO  \n",
       "6                  Y          93746.0  2016                PLANO, TEXAS  \n",
       "7                  N          47965.0  2016        JOHNS CREEK, GEORGIA  \n",
       "8                  N          47965.0  2016        JOHNS CREEK, GEORGIA  \n",
       "9                  N          47445.0  2016      EL SEGUNDO, CALIFORNIA  "
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CASE_STATUS</th>\n",
       "      <th>EMPLOYER_NAME</th>\n",
       "      <th>SOC_NAME</th>\n",
       "      <th>JOB_TITLE</th>\n",
       "      <th>FULL_TIME_POSITION</th>\n",
       "      <th>PREVAILING_WAGE</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>WORKSITE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4990</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>GLOBAL DATA SOLUTIONS, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>60091.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>BLOOMINGTON, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4991</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>IBM INDIA PVT LIMITED</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PACKAGE SOLUTION CONSULTANT</td>\n",
       "      <td>Y</td>\n",
       "      <td>67808.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>CHICAGO, ILLINOIS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4992</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>SKY SOLUTIONS LLC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>67621.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>CHANTILLY, VIRGINIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4993</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ADROIX CORP.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>46904.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>ALPHARETTA, GEORGIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4994</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>INTEGRATED TECHNOLOGY SERVICES, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>BUSINESS ANALYST</td>\n",
       "      <td>N</td>\n",
       "      <td>67620.8</td>\n",
       "      <td>2015</td>\n",
       "      <td>HERNDON, VIRGINIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ENDUE CORP.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROGRAMMER ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>60549.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>WESTBOROUGH, MASSACHUSETTS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>INFOSYS LIMITED</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROJECT MANAGER - US</td>\n",
       "      <td>Y</td>\n",
       "      <td>83158.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>MOUNDS VIEW, MINNESOTA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>ORPINE, INC.</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>TEAM LEAD</td>\n",
       "      <td>Y</td>\n",
       "      <td>46904.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>ALPHARETTA, GEORGIA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>LENORA SYSTEMS INC</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>PROGRAMMER ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>58885.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>DALLAS, TEXAS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>CERTIFIED</td>\n",
       "      <td>VECTRATEK SOLUTIONS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYSTS</td>\n",
       "      <td>COMPUTER SYSTEMS ANALYST</td>\n",
       "      <td>Y</td>\n",
       "      <td>55245.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>OAKBROOK, ILLINOIS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     CASE_STATUS                         EMPLOYER_NAME  \\\n",
       "4990   CERTIFIED           GLOBAL DATA SOLUTIONS, INC.   \n",
       "4991   CERTIFIED                 IBM INDIA PVT LIMITED   \n",
       "4992   CERTIFIED                     SKY SOLUTIONS LLC   \n",
       "4993   CERTIFIED                          ADROIX CORP.   \n",
       "4994   CERTIFIED  INTEGRATED TECHNOLOGY SERVICES, INC.   \n",
       "4995   CERTIFIED                           ENDUE CORP.   \n",
       "4996   CERTIFIED                       INFOSYS LIMITED   \n",
       "4997   CERTIFIED                          ORPINE, INC.   \n",
       "4998   CERTIFIED                    LENORA SYSTEMS INC   \n",
       "4999   CERTIFIED                   VECTRATEK SOLUTIONS   \n",
       "\n",
       "                       SOC_NAME                    JOB_TITLE  \\\n",
       "4990  COMPUTER SYSTEMS ANALYSTS              SYSTEMS ANALYST   \n",
       "4991  COMPUTER SYSTEMS ANALYSTS  PACKAGE SOLUTION CONSULTANT   \n",
       "4992  COMPUTER SYSTEMS ANALYSTS     COMPUTER SYSTEMS ANALYST   \n",
       "4993  COMPUTER SYSTEMS ANALYSTS              SYSTEMS ANALYST   \n",
       "4994  COMPUTER SYSTEMS ANALYSTS             BUSINESS ANALYST   \n",
       "4995  COMPUTER SYSTEMS ANALYSTS           PROGRAMMER ANALYST   \n",
       "4996  COMPUTER SYSTEMS ANALYSTS         PROJECT MANAGER - US   \n",
       "4997  COMPUTER SYSTEMS ANALYSTS                    TEAM LEAD   \n",
       "4998  COMPUTER SYSTEMS ANALYSTS           PROGRAMMER ANALYST   \n",
       "4999  COMPUTER SYSTEMS ANALYSTS     COMPUTER SYSTEMS ANALYST   \n",
       "\n",
       "     FULL_TIME_POSITION  PREVAILING_WAGE  YEAR                    WORKSITE  \n",
       "4990                  Y          60091.0  2015       BLOOMINGTON, ILLINOIS  \n",
       "4991                  Y          67808.0  2015           CHICAGO, ILLINOIS  \n",
       "4992                  Y          67621.0  2015         CHANTILLY, VIRGINIA  \n",
       "4993                  Y          46904.0  2015         ALPHARETTA, GEORGIA  \n",
       "4994                  N          67620.8  2015           HERNDON, VIRGINIA  \n",
       "4995                  Y          60549.0  2015  WESTBOROUGH, MASSACHUSETTS  \n",
       "4996                  Y          83158.0  2015      MOUNDS VIEW, MINNESOTA  \n",
       "4997                  Y          46904.0  2015         ALPHARETTA, GEORGIA  \n",
       "4998                  Y          58885.0  2015               DALLAS, TEXAS  \n",
       "4999                  Y          55245.0  2015          OAKBROOK, ILLINOIS  "
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd2.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd2' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-242a2a9fc8c2>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mpd2\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpd2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m>\u001b[0m\u001b[1;36m50\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m&\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpd2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m<\u001b[0m\u001b[1;36m59\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'pd2' is not defined"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
