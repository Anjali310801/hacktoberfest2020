{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dealing with Numpy and its utilities...\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5]\n",
      "[1 2 3 4 5]\n"
     ]
    }
   ],
   "source": [
    "#creating nd-array from the list\n",
    "#note: all elements must be the same type\n",
    "#(will be converted if possible)\n",
    "data1 = [1,2,3,4,5] #defining a list\n",
    "print(data1)\n",
    "arr1 = np.array(data1) #creating a 1-d array from list\n",
    "print(arr1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[range(1, 5), range(5, 9)]\n",
      "[[1 2 3 4]\n",
      " [5 6 7 8]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[[1, 2, 3, 4], [5, 6, 7, 8]]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2 = [range(1,5),range(5,9)] #list of lists\n",
    "print(data2)\n",
    "arr2 = np.array(data2) #creating 2-d array\n",
    "print(arr2)\n",
    "arr2.tolist() #converting the n-d array to list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5]\n",
      "[[1 2 3 4]\n",
      " [5 6 7 8]]\n",
      "int32\n",
      "int32\n",
      "1\n",
      "2\n",
      "(5,)\n",
      "(2, 4)\n",
      "5\n",
      "8\n",
      "5\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "#examining nd array\n",
    "print(arr1)\n",
    "print(arr2)\n",
    "print(arr1.dtype)  #getting the datatype\n",
    "print(arr2.dtype)  \n",
    "print(arr1.ndim)   #getting the dimension\n",
    "print(arr2.ndim)   \n",
    "print(arr1.shape)  #getting the shape of array\n",
    "print(arr2.shape)\n",
    "print(arr1.size)   #getting the size\n",
    "print(arr2.size)\n",
    "print(len(arr1))   #getting the element count\n",
    "print(len(arr2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\narr.ndim getting the dimension count\\n1-d: column count\\n2-d: row count,column count\\n3-d: layer count, row count, column count\\n'"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "arr.ndim getting the dimension count\n",
    "1-d: column count\n",
    "2-d: row count,column count\n",
    "3-d: layer count, row count, column count\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
      "[[1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]]\n",
      "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      "[[0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "#creating special arrays\n",
    "print(np.ones(10))\n",
    "print(np.ones((3,5)))\n",
    "print(np.zeros(10))\n",
    "print(np.zeros((3,5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.   0.25 0.5  0.75 1.  ]\n"
     ]
    }
   ],
   "source": [
    "print(np.linspace(0,1,5)) #0 to 1 inclusive with points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[   1.   10.  100. 1000.]\n"
     ]
    }
   ],
   "source": [
    "print(np.logspace(0,3,4)) #10**0 to 10**3 inclusive with points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4]\n"
     ]
    }
   ],
   "source": [
    "#dealing with arange, arange is like range, except it returns an array (not a list)\n",
    "int_array = np.arange(5)\n",
    "print(int_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 1. 2. 3. 4.]\n"
     ]
    }
   ],
   "source": [
    "#dealing with astype, it does typecasting\n",
    "float_array = int_array.astype(float)\n",
    "print(float_array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 1. 2. 3. 4. 5. 6. 7. 8. 9.]\n"
     ]
    }
   ],
   "source": [
    "#dealing with matrix\n",
    "matrix = np.arange(10,dtype=float)\n",
    "print(matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 1. 2. 3. 4.]\n",
      " [5. 6. 7. 8. 9.]]\n",
      "[[0. 1.]\n",
      " [2. 3.]\n",
      " [4. 5.]\n",
      " [6. 7.]\n",
      " [8. 9.]]\n"
     ]
    }
   ],
   "source": [
    "#dealing with reshape\n",
    "matrix1 = np.arange(10,dtype=float).reshape((2,5))\n",
    "print(matrix1)\n",
    "matrix1 = matrix1.reshape((5,2))\n",
    "print(matrix1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n",
      "[[0]\n",
      " [1]\n",
      " [2]\n",
      " [3]\n",
      " [4]\n",
      " [5]\n",
      " [6]\n",
      " [7]\n",
      " [8]\n",
      " [9]]\n",
      "[[[0]]\n",
      "\n",
      " [[1]]\n",
      "\n",
      " [[2]]\n",
      "\n",
      " [[3]]\n",
      "\n",
      " [[4]]\n",
      "\n",
      " [[5]]\n",
      "\n",
      " [[6]]\n",
      "\n",
      " [[7]]\n",
      "\n",
      " [[8]]\n",
      "\n",
      " [[9]]]\n"
     ]
    }
   ],
   "source": [
    "#adding an  axis\n",
    "a = np.arange(10)  #1-d\n",
    "print(a)\n",
    "a_col = a[:,np.newaxis]  #2-d\n",
    "print(a_col)\n",
    "a_col2 = a_col[:,np.newaxis] #3-d\n",
    "print(a_col2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 5]\n",
      " [2 6]\n",
      " [3 7]\n",
      " [4 8]]\n",
      "[[1 2 3 4]\n",
      " [5 6 7 8]]\n"
     ]
    }
   ],
   "source": [
    "#performing transpose of a nd array\n",
    "print(arr2.T)\n",
    "arr=arr2.T\n",
    "print(arr.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5]\n",
      "1\n",
      "[[1 2 3 4]\n",
      " [5 6 7 8]]\n",
      "4\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "#dealing with stack arrays\n",
    "#selection\n",
    "#single item\n",
    "print(arr1)\n",
    "print(arr1[0])        # 0-th element, (slice like a list)\n",
    "print(arr2)     \n",
    "print(arr2[0,3])      # element at row 0, column 3\n",
    "print(arr2[0][3])    #alternative syntax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3 4]\n",
      " [5 6 7 8]]\n",
      "[1 2 3 4]\n",
      "[1 5]\n",
      "[[1 2]\n",
      " [5 6]]\n",
      "[]\n",
      "[[2 3]\n",
      " [6 7]]\n"
     ]
    }
   ],
   "source": [
    "# slicing\n",
    "print(arr2)\n",
    "print(arr2[0,:])   # row 0, returns 1d array {{1,2,3,4}}\n",
    "print(arr2[:,0])   # column 0, returns {{1,5}}\n",
    "print(arr2[:,:2])  # column strictly before index 2\n",
    "print(arr[:,2:])   # column after index 2 (included)\n",
    "print(arr2[:,1:3]) # column between index 1 and 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4 5 6 7 8 9]\n",
      "[5 6 7]\n",
      "[ 0  1  2  3  4 12 12 12  8  9]\n"
     ]
    }
   ],
   "source": [
    "# views and copies\n",
    "arr = np.arange(10)\n",
    "print(arr)\n",
    "print(arr[5:8])\n",
    "arr[5:8] = 12        #values getting updated\n",
    "print (arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4 12 12 12  8  9]\n",
      "[12 12 12]\n",
      "[13 13 13]\n",
      "[ 0  1  2  3  4 13 13 13  8  9]\n"
     ]
    }
   ],
   "source": [
    "print(arr)\n",
    "arr_view = arr[5:8]  # creating array view not copy\n",
    "print(arr_view)\n",
    "arr_view[:]=13\n",
    "print(arr_view)\n",
    "print(arr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  4 13 13 13  8  9]\n",
      "[13 13 13]\n",
      "[14 14 14]\n",
      "[ 0  1  2  3  4 13 13 13  8  9]\n"
     ]
    }
   ],
   "source": [
    "print(arr)\n",
    "arr_copy = arr[5:8].copy()  # creating array copy\n",
    "print(arr_copy)\n",
    "arr_copy[:]=14\n",
    "print(arr_copy)\n",
    "print(arr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'np' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-8397ef944906>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# using boolean array\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;31m# boolean selection returns a view which authorizes the modification of the original array\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mar\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mar_bool\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mar\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mar\u001b[0m \u001b[1;33m>\u001b[0m \u001b[1;36m5\u001b[0m\u001b[1;33m]\u001b[0m  \u001b[1;31m#only greater than 5 elements will be selected\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'np' is not defined"
     ]
    }
   ],
   "source": [
    "# using boolean array\n",
    "# boolean selection returns a view which authorizes the modification of the original array\n",
    "ar = np.arange(10)\n",
    "print(arr)\n",
    "ar_bool = ar[ar > 5]  #only greater than 5 elements will be selected\n",
    "print(ar_bool)\n",
    "a5=ar[ar > 5]\n",
    "a5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bob' 'joe' 'will' 'bob']\n",
      "[ True False False  True]\n",
      "[False  True  True False]\n",
      "[ True False  True  True]\n"
     ]
    }
   ],
   "source": [
    "names = np.array([\"bob\",\"joe\",\"will\",\"bob\"])\n",
    "print(names)\n",
    "print(names == \"bob\")\n",
    "print(names != \"bob\")\n",
    "print((names == \"bob\") | (names == \"will\"))\n",
    "#keyword \"and,or\" will not be applicable here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bob' 'joe' 'will' 'bob']\n",
      "['bob' 'joe' 'joe' 'bob']\n",
      "['bob' 'abcd' 'abcd' 'bob']\n",
      "['bob' 'abcd' 'abcd' 'bob']\n"
     ]
    }
   ],
   "source": [
    "print(names)\n",
    "names [names!= \"bob\"] = \"joe\"  # assignment based on the logical selection\n",
    "print(names)\n",
    "names [names!= \"bob\"] = \"abcd\"  # assignment based on the logical selection\n",
    "print(names)\n",
    "names [names!= \"bob\"] = \"abcde\"  # assignment based on the logical selection\n",
    "print(names)\n",
    "# will only print upto length of the element of maximum length in the given array\n",
    "# if the length of new assignment is greater then it will print upto length of maximum element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bob' 'joe' 'will' 'bob']\n",
      "['bob' 'joe' 'bob']\n"
     ]
    }
   ],
   "source": [
    "# Deletion\n",
    "names = np.array([\"bob\",\"joe\",\"will\",\"bob\"])\n",
    "print(names)\n",
    "names=names[names!=names[2]]\n",
    "print (names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n# Deletion\\nnames = np.array([\"bob\",\"joe\",\"will\",\"bob\"])\\nprint(names)\\ndel names[0]\\nprint(names)\\n# cannot delete array elements using del keyword\\n'"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "# Deletion\n",
    "names = np.array([\"bob\",\"joe\",\"will\",\"bob\"])\n",
    "print(names)\n",
    "del names[0]\n",
    "print(names)\n",
    "# cannot delete array elements using del keyword\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4]\n",
      "[ 0 10 20 30 40]\n",
      "[0.         3.16227766 4.47213595 5.47722558 6.32455532]\n",
      "[0. 4. 5. 6. 7.]\n",
      "[0. 3. 4. 5. 6.]\n",
      "[False False False False False]\n"
     ]
    }
   ],
   "source": [
    "# vectorized operations\n",
    "nums = np.arange(5)  #creating 1d-array\n",
    "print(nums)\n",
    "nums = nums*10\n",
    "print(nums)\n",
    "nums=np.sqrt(nums)\n",
    "print(nums)\n",
    "num_result=np.ceil(nums)\n",
    "print(num_result)\n",
    "num_result=np.floor(nums)\n",
    "print(num_result)\n",
    "num_result=np.isnan(nums)\n",
    "print(num_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 2  3  1  5 16]\n",
      "[ 2  4  3  8 20]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([ 2,  3,  3,  5, 16])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nums = np.array([2,3,1,5,16])\n",
    "print(nums)\n",
    "print(nums + np.arange(5))   #add element wise\n",
    "np.maximum(nums,np.array([1,-2,3,-4,15]))\n",
    "# comparision element wise"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.56252221 0.71069193 0.79817851 0.64105684 0.25800731 0.4566232\n",
      " 0.50833976 0.51358914 0.58265473 0.96490666]\n",
      "[0.73568401 0.61380396 0.73239818 0.67558694 0.83642225 0.5453846\n",
      " 0.7773369  0.22081875 0.24333374 0.812466  ]\n",
      "distance:  0.8269129016839386\n"
     ]
    }
   ],
   "source": [
    "# computing Euclidian distance between 2 vectors\n",
    "vec1 = np.random.rand(10)\n",
    "print(vec1)\n",
    "vec2 = np.random.rand(10)\n",
    "print(vec2)\n",
    "dist = np.sqrt(np.sum((vec1-vec2)**2))\n",
    "print(\"distance: \", dist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-2.28785223  0.73669345]\n",
      " [ 1.1851809  -1.09344748]\n",
      " [ 0.93061423  0.13258815]\n",
      " [-0.15065475  0.05027504]]\n",
      "Mean: -0.06207533691293843\n",
      "Standard Deviation: 1.0755978783855678\n",
      "Min no.: -2.287852233468372\n",
      "Min Index: 0\n",
      "Total: -0.4966026953035074\n",
      "Col sum: [-0.32271186 -0.17389084]\n",
      "Row sum: [-1.55115878  0.09173342  1.06320238 -0.10037971]\n"
     ]
    }
   ],
   "source": [
    "#maths and stats\n",
    "rnd = np.random.randn(4,2)  #random numbers in 4X2\n",
    "#array\n",
    "print(rnd)\n",
    "print(\"Mean:\",rnd.mean())\n",
    "print(\"Standard Deviation:\",rnd.std())\n",
    "print(\"Min no.:\",rnd.min())\n",
    "print(\"Min Index:\",rnd.argmin())  #index of min elements\n",
    "print(\"Total:\",rnd.sum())\n",
    "print(\"Col sum:\",rnd.sum(axis=0)) #sum of column\n",
    "print(\"Row sum:\",rnd.sum(axis=1)) #sum of row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "# methods of boolean arrays\n",
    "print((rnd>0).sum()) # count no. of positive values\n",
    "print((rnd>0).any()) # checks if ant value is true\n",
    "print((rnd>0).all()) #checks if all values are true"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2  3]\n",
      " [ 4  5  6  7]\n",
      " [ 8  9 10 11]\n",
      " [12 13 14 15]\n",
      " [16 17 18 19]\n",
      " [20 21 22 23]\n",
      " [24 25 26 27]\n",
      " [28 29 30 31]]\n",
      "[[ 0  4  8 12 16 20 24 28]\n",
      " [ 1  5  9 13 17 21 25 29]\n",
      " [ 2  6 10 14 18 22 26 30]\n",
      " [ 3  7 11 15 19 23 27 31]]\n",
      "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29 30 31]\n",
      "[ 0  4  8 12 16 20 24 28  1  5  9 13 17 21 25 29  2  6 10 14 18 22 26 30\n",
      "  3  7 11 15 19 23 27 31]\n"
     ]
    }
   ],
   "source": [
    "# Reshape, Transpose, Flatten operations\n",
    "nums = np.arange(32).reshape(8,4) #creates 8X2 array\n",
    "print(nums)\n",
    "print(nums.T)           #transpose\n",
    "num1=nums.T\n",
    "print(nums.flatten())   #flatten\n",
    "print(num1.flatten())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.29076521 0.4302871  0.79227993]\n",
      " [0.89398266 0.04634359 0.62256503]]\n",
      "[-0.11004574 -2.85556645 -0.70677864 -0.49377979  1.18415971  0.89616655\n",
      " -1.38572304  1.26004491  0.7950602  -0.81264789]\n"
     ]
    }
   ],
   "source": [
    "# random numbers\n",
    "np.random.seed(50015)   # set the seed value (helps in generation of same random number again and again)\n",
    "print(np.random.rand(2,3))     # 2 X 3 matrix in [0,1]\n",
    "print(np.random.randn(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4 8 5 1 4]\n"
     ]
    }
   ],
   "source": [
    "print(str(np.random.randint(0,10,5)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 1 1 1 1 1 1 0 0 1]\n"
     ]
    }
   ],
   "source": [
    "#random binary array\n",
    "arr=np.random.randint(0,2,10)\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0  1  2]\n",
      " [10 11 12]\n",
      " [20 21 22]\n",
      " [30 31 32]]\n",
      "[[ 0  1  2]\n",
      " [10 11 12]\n",
      " [20 21 22]\n",
      " [30 31 32]]\n",
      "[[ 0  1  2]\n",
      " [10 11 12]\n",
      " [20 21 22]\n",
      " [30 31 32]]\n"
     ]
    }
   ],
   "source": [
    "# Broadcasting\n",
    "# 4 X 4 + 1 X 3\n",
    "a = np.array([[0,0,0],[10,10,10],[20,20,20],[30,30,30]])\n",
    "b = np.array([0,1,2])\n",
    "print (a+b)\n",
    "# 4 X 1 + 1 X 3\n",
    "c = np.array([[0],[10],[20],[30]])\n",
    "d = np.array([0,1,2])\n",
    "print (c+d)\n",
    "# 4 X 4 + 3 X 3\n",
    "e = np.array([[0,0,0],[10,10,10],[20,20,20],[30,30,30]])\n",
    "f = np.array([[0,1,2],[0,1,2],[0,1,2],[0,1,2]])\n",
    "print (e+f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-0.92613577  1.02487983]\n",
      " [ 1.57349401  0.68617859]\n",
      " [-0.21693078  0.69441644]\n",
      " [ 1.07371934 -0.41271762]]\n",
      "Min no.: [-0.92613577 -0.41271762]\n",
      "Min Index: [0 3]\n"
     ]
    }
   ],
   "source": [
    "# Assignment\n",
    "# Given the array\n",
    "X = np.random.randn(4,2)  # random numbers in 4 X 2\n",
    "print(X)\n",
    "# for each column find the row index of the min value\n",
    "print(\"Min no.:\",X.min(axis=0))\n",
    "print(\"Min Index:\",X.argmin(axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
